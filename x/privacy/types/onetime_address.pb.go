// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacy/onetime_address.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OnetimeAddress struct {
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	TokenId   []byte `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	I         []byte `protobuf:"bytes,5,opt,name=i,proto3" json:"i,omitempty"`
	Status    int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *OnetimeAddress) Reset()         { *m = OnetimeAddress{} }
func (m *OnetimeAddress) String() string { return proto.CompactTextString(m) }
func (*OnetimeAddress) ProtoMessage()    {}
func (*OnetimeAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bb3893a798ada8c, []int{0}
}
func (m *OnetimeAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnetimeAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnetimeAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnetimeAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnetimeAddress.Merge(m, src)
}
func (m *OnetimeAddress) XXX_Size() int {
	return m.Size()
}
func (m *OnetimeAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_OnetimeAddress.DiscardUnknown(m)
}

var xxx_messageInfo_OnetimeAddress proto.InternalMessageInfo

func (m *OnetimeAddress) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *OnetimeAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *OnetimeAddress) GetTokenId() []byte {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *OnetimeAddress) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *OnetimeAddress) GetI() []byte {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *OnetimeAddress) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*OnetimeAddress)(nil), "privacy.privacy.OnetimeAddress")
}

func init() { proto.RegisterFile("privacy/onetime_address.proto", fileDescriptor_7bb3893a798ada8c) }

var fileDescriptor_7bb3893a798ada8c = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2c,
	0x4b, 0x4c, 0xae, 0xd4, 0xcf, 0xcf, 0x4b, 0x2d, 0xc9, 0xcc, 0x4d, 0x8d, 0x4f, 0x4c, 0x49, 0x29,
	0x4a, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x87, 0x4a, 0xeb, 0x41, 0x69,
	0xa5, 0x05, 0x8c, 0x5c, 0x7c, 0xfe, 0x10, 0xa5, 0x8e, 0x10, 0x95, 0x42, 0x22, 0x5c, 0xac, 0x99,
	0x79, 0x29, 0xa9, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x04, 0x17,
	0x7b, 0x72, 0x51, 0x6a, 0x62, 0x49, 0x7e, 0x91, 0x04, 0x13, 0x58, 0x1c, 0xc6, 0x15, 0x92, 0xe4,
	0xe2, 0x28, 0xc9, 0xcf, 0x4e, 0xcd, 0x8b, 0xcf, 0x4c, 0x91, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09,
	0x62, 0x07, 0xf3, 0x3d, 0x53, 0x84, 0x64, 0xb9, 0xb8, 0x0a, 0x4a, 0x93, 0x72, 0x32, 0x93, 0xe3,
	0xb3, 0x53, 0x2b, 0x25, 0x58, 0xc0, 0x92, 0x9c, 0x10, 0x11, 0xef, 0xd4, 0x4a, 0x21, 0x1e, 0x2e,
	0xc6, 0x4c, 0x09, 0x56, 0xb0, 0x28, 0x63, 0xa6, 0x90, 0x18, 0x17, 0x5b, 0x71, 0x49, 0x62, 0x49,
	0x69, 0xb1, 0x04, 0x9b, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x94, 0xe7, 0x64, 0x78, 0xe2, 0x91, 0x1c,
	0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1,
	0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xe2, 0x30, 0xcf, 0x56, 0xe8, 0xc3, 0x58, 0x25, 0x95,
	0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0xdf, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0xa3,
	0xd0, 0x46, 0x0e, 0x01, 0x00, 0x00,
}

func (m *OnetimeAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnetimeAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnetimeAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.I) > 0 {
		i -= len(m.I)
		copy(dAtA[i:], m.I)
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(len(m.I)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintOnetimeAddress(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOnetimeAddress(dAtA []byte, offset int, v uint64) int {
	offset -= sovOnetimeAddress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OnetimeAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovOnetimeAddress(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOnetimeAddress(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovOnetimeAddress(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovOnetimeAddress(uint64(l))
	}
	l = len(m.I)
	if l > 0 {
		n += 1 + l + sovOnetimeAddress(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOnetimeAddress(uint64(m.Status))
	}
	return n
}

func sovOnetimeAddress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOnetimeAddress(x uint64) (n int) {
	return sovOnetimeAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OnetimeAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnetimeAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnetimeAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnetimeAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenId == nil {
				m.TokenId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.I = append(m.I[:0], dAtA[iNdEx:postIndex]...)
			if m.I == nil {
				m.I = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnetimeAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOnetimeAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOnetimeAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOnetimeAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnetimeAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOnetimeAddress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOnetimeAddress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOnetimeAddress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOnetimeAddress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOnetimeAddress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOnetimeAddress = fmt.Errorf("proto: unexpected end of group")
)
